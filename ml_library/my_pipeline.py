from .preprocessing import PreprocessingPipeline
import pandas as pd
from sklearn.base import BaseEstimator

class MyPipeline(BaseEstimator):
    """
    A custom pipeline for preprocessing data and applying a scikit-learn model for fitting and prediction.

    This pipeline integrates a preprocessing pipeline (for data transformation) with a scikit-learn-compatible 
    model for training and inference. It is specifically designed to handle scenarios where the preprocessing 
    pipeline is fitted on training data and then applied to separate test or new data for prediction. 

    **Key Features:**
    1. Accepts only scikit-learn models that require calling `.fit` to train and `.predict` to make predictions.
    2. Allows the preprocessing pipeline to fit transformations (e.g., standardization, imputation) on the training data 
       and reuses those learned transformations for transforming the test or new data during prediction.
    3. Complies with scikit-learn's `BaseEstimator` interface, ensuring compatibility with utilities such as 
       `RandomizedSearchCV` and `GridSearchCV`.

    **Attributes:**
        model (BaseEstimator): A scikit-learn-compatible model that supports `.fit` and `.predict` methods.
        preprocessing (PreprocessingPipeline): A pipeline for data preprocessing. Defaults to an empty pipeline.
        is_fitted_ (bool): A flag indicating whether the pipeline (preprocessing + model) has been fitted.

    **Methods:**
        fit(X: pd.DataFrame, y: pd.Series) -> None:
            Fits the preprocessing pipeline and the model to the training data.

        predict(X: pd.DataFrame) -> pd.DataFrame:
            Transforms the input data using the previously fitted preprocessing pipeline and generates predictions 
            using the fitted model.

    **Important Notes:**
    - The `model` must be a scikit-learn model with `.fit` and `.predict` methods. Models that do not follow 
      this convention will result in an error.
    - The `fit` method fits both the preprocessing pipeline and the model using the training data. The `predict` method 
      uses the fitted preprocessing transformations to preprocess test or new data before generating predictions.
    - The pipeline is compatible with scikit-learn tools, enabling hyperparameter optimization and model evaluation.
    """
    def __init__(self, model: BaseEstimator, preprocessing: PreprocessingPipeline = PreprocessingPipeline()):
        """
        Initializes the pipeline with a preprocessing pipeline and a scikit-learn-compatible model.

        Args:
            model (BaseEstimator): The scikit-learn model for training and prediction.
            preprocessing (PreprocessingPipeline): A preprocessing pipeline to apply to the data.
                Defaults to an empty pipeline.
        """
        self.model = model
        self.preprocessing = preprocessing
        self.is_fitted_ = False
    
    def fit(self, X: pd.DataFrame, y: pd.Series) -> None:
        """
        Fits the preprocessing pipeline and the scikit-learn model to the training data.

        Args:
            X (pd.DataFrame): The training features.
            y (pd.Series): The target variable for training the model.

        Returns:
            Self: The fitted MyPipeline instance.
        """
        X_copy = X.copy()
        self.preprocessing.fit(X_copy)
        X_preprocessed = self.preprocessing.transform(X_copy)
        self.model.fit(X_preprocessed, y)
        self.is_fitted_ = True
        return self

    def predict(self, X: pd.DataFrame) -> pd.DataFrame:
        """
        Applies the previously fitted preprocessing pipeline to the input data and generates predictions 
        using the fitted model.

        **Note:** The preprocessing pipeline uses the transformations fitted on the training data.

        Args:
            X (pd.DataFrame): The features of the test or new data.

        Returns:
            pd.DataFrame: The predictions generated by the model.
        """
        X_copy = X.copy()
        X_preprocessed = self.preprocessing.transform(X_copy)
        return self.model.predict(X_preprocessed)